when the back button is pressed then there is three ststes are called 1) onRestart(), 2) onStart(), 3) onResume().
onPause()- when app have some dialouge popup or any reason when app got some partially stopped then its called pause state.
onStop()- when app is properly closed or home button is pressed then that state is called as stop.


// another way to use interface instade of implements and making objects and calling that's like other stuffs
interface I{
	public void test();	
}

public class differentWay_interface {
	public static void main(String args[]) {
		
		new I() {
			public void test() {
				System.out.println("It works, Yeh!!");
			}	
		}.test();		
	}
}

// 1st way to handle the  button without implementing interface in main activity
public class MainActivity extends Activity{
	Button button;
	
	....... onCreate(...){
		.......
		.....
		
		button=(Button) findViewById(R.id.yourId);
		button.setOnClickListener(yourObject);
	}
	OnClickListener yourObject = new OnClickListener(){
		@override
		public void onClick(View v){
			// do what you like when clcik
		}
	};
}

// 2nd way to handle the  button without implementing interface in main activity
c class MainActivity extends Activity{
	Button button;
	
	....... onCreate(...){
		.......
		.....
		
		button=(Button) findViewById(R.id.yourId);
		button.setOnClickListener(new OnClickListener()
		{
		@override
		public void onClick(View v){
			// do what you like when clcik
		}
	});		
}


intent is basically a messanger which helps you to get your requested things
Intent i= new Intent(Context c, Class d);
here context is what you want and class is where you from want.
i.setClassName(String packageName, String className);
startActivity(i);

explicit intent means we who who we are calling them.
implicit intent:- Tell what action you want to perform without worrying about who can perform it.

4 pieces of an intent:
1-Action:- Define what you want to do[Ex: place a phone call]
2-Data:- What type of data you want ot work with[ex: URL,images]
3-Extras:- What additional information you need to provide(key/value pairs) [ex: phone number of the person]
4- Categories:- Create group of components to handle the intent, Give additional information along with the ACTION [ex: place Activity A in the launcher]


Intent Resolution:- package manager takes the intent and compare it with the diffeent of activities and services and when it founds no onw then it shows no list activity. 2)when it found one activity then it will start directly that activity. 3)when the multiple activity occur then it will show that list of activity to chosse us, this is called intent resolution.

//Get fullscreen feature 
type this code before setContent in main activity and also set no action bar in styles.xml
requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.activity_main);
	
//	
//using event listener for opening activity
step 1- cast your textview or button view object
TextView abcd = (TextView) findViewById(R.id.abcd);
step 2- set click listener
abcd.setOnClickListener(new View.OnClickListener(){
	Intent abcdIntent = new Intent(new MainActivity.this,AbcdActivity.class);
	startActivity(abcdIntent);
});

This will start new activity as soon as you press on textview

//////

// hide or make visible views with method

setVisibility method:- there is three parameter you can pass is : VISIBLE, INVISIBLE and GONE.
this method helps to hide or make visible any view in the code.
ex:- textView.setVisibility(View.VISIBLE); //then textview will be vivible
textView.setVisibility(View.INVISIBLE);// then view will be invisible but still takes up space for layout purpose
textView.setVisiblity(View.GONE);// thne view will be invisible and doesn't take space for layout purpose


// Some little info about when taking input from user
if you use nextInt()method and after thar instant you use nextLine() method then it will return blank because it already read 
integers untill user finish input. so if you want to read your next input then you have to take it to the next line after that 
you can only get input otherwise yoy will get blank.
//
	
//How to draw a separate line 
<view
android:layout_marginTop="2dp"
        android:layout_below="@id/App_name" //mention layout you want to draw line below
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="@android:color/darker_gray"/>
/>
//

// How to use gradient color background
add gradient.xml file into your drawable folder
Then define start color end color and center color thats it
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:startColor="#3B5998"
        android:endColor="#00000000"
        android:angle="45"/>    
</shape>
then use android:background="@drawable/gradient" where you want
//

// How to draw separate line
//write this in dash.xml file in drawable folder
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="line">
    <stroke android:color="@color/editTextBG"
        android:width="1dp"
        android:dashGap="1.5dp"
        android:dashWidth="3dp"
        />

</shape>
